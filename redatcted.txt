
@app.route('/fetch-pending-anamnesis-all', methods=['GET'])
def fetch_pending_anamnesis_all():
	db = get_database()
	cursor = db.cursor()

	sql = """
		SELECT a.idAnamnesis,
			   p.name AS p_name,
			   p.surname AS p_surname,
			   a.title,
			   a.contents,       -- encrypted blob
			   d.name AS d_name,
			   d.surname AS d_surname,
			   p.enc_key         -- the patient's encrypted DEK
		FROM Anamnesis AS a
		JOIN Patient   AS p ON a.fk_patient = p.idPatient
		JOIN Doctor    AS d ON a.fk_doctor  = d.idDoctor
		WHERE a.status = 'pending';
	"""
	cursor.execute(sql)
	rows = cursor.fetchall()

	result = []
	for row in rows:
		(
			id_anam,
			p_name,
			p_surname,
			title,
			enc_contents_blob,
			d_name,
			d_surname,
			patient_enc_key_b64
		) = row

		try:
			patient_dek = decrypt_dek(patient_enc_key_b64)
			plaintext = decrypt_text(enc_contents_blob, patient_dek)

		except Exception as e:
			plaintext = ""
			print(f"Failed to decrypt anamnesis #{id_anamnes}: {e}")

		result.append({
			"id_anamnesis": id_anam,
			"p_name": p_name,
			"p_surname": p_surname,
			"title": title,
			"contents": plaintext,
			"d_name": d_name,
			"d_surname": d_surname
		})

	return jsonify(result), 200


@app.route('/update-personel-anamnesis', methods=['POST'])
def update_personel_anamnesis():
	data = request.get_json()
	if not data:
		return jsonify({"error": "Missing JSON body"}), 400

	anam_id = data.get("anamnesis_id")
	new_plain = data.get("contents", "").strip()

	if anam_id is None or new_plain == "":
		return jsonify({"error": "Missing required fields"}), 400

	db = get_database()
	cursor = db.cursor()
	cursor.execute(
		"SELECT fk_patient FROM Anamnesis WHERE idAnamnesis = %s AND status = 'pending';",
		(anam_id,)
	)
	row = cursor.fetchone()
	if not row:
		return jsonify({"error": "No such pending anamnesis or already approved"}), 404

	pid = row[0]

	cursor.execute("SELECT enc_key FROM Patient WHERE idPatient = %s;", (pid,))
	patient_row = cursor.fetchone()
	if not patient_row:
		return jsonify({"error": "Invalid patient ID"}), 400

	patient_enc_key_b64 = patient_row[0]

	try:
		patient_dek = decrypt_dek(patient_enc_key_b64)

		new_enc = encrypt_text(new_plain, patient_dek)

		cursor.execute(
			"UPDATE Anamnesis SET contents = %s, status = 'approved', updated_at = NOW() WHERE idAnamnesis = %s;",
			(new_enc, anam_id)
		)
		db.commit()

	except Exception as e:
		print(f"Failed to update anamnesis #{anam_id}: {e}")
		return jsonify({"error": "Encryption or DB update failed"}), 500

	return jsonify({"status": "approved"}), 200  # This is probably broken?

